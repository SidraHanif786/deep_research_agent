from agents import Agent, function_tool
import json
from datetime import datetime

@function_tool
def generate_research_report(synthesis_data: str, query: str, user_profile: str) -> str:
    """
    Generate a professional research report from synthesized data.
    Returns a formatted research report with citations.
    """
    try:
        synthesis = json.loads(synthesis_data)
        profile = json.loads(user_profile)
        
        # Create citations
        sources = synthesis.get("sources", [])
        citations = []
        
        for i, source in enumerate(sources, 1):
            citations.append(f"[{i}] {source.get('title', 'Unknown title')} - {source.get('url', 'No URL')}")
        
        report = f"""
        RESEARCH REPORT
        ================
        
        Date: {datetime.now().strftime("%Y-%m-%d")}
        Prepared for: {profile.get('name', 'User')}
        Location: {profile.get('city', 'Unknown')}
        Research Interest: {profile.get('topic', 'General')}
        Original Query: {query}
        
        EXECUTIVE SUMMARY
        -----------------
        This report presents findings on '{query}' based on comprehensive research
        from {synthesis.get('sources_analyzed', 'multiple')} sources. Key insights have been 
        synthesized to provide a balanced perspective on the topic.
        
        Confidence Level: {synthesis.get('confidence_level', 'Unknown')}
        
        KEY FINDINGS
        ------------
        {synthesis.get('summary', 'No summary available')}
        
        {"".join([f"• {insight}\\n" for insight in synthesis.get('key_insights', [])])}
        
        AREAS OF CONSENSUS
        ------------------
        {"".join([f"• {point}\\n" for point in synthesis.get('consensus_points', ['No consensus data available'])])}
        
        AREAS OF CONFLICT
        -----------------
        {"".join([f"• {point}\\n" for point in synthesis.get('conflicting_points', ['No conflicts identified'])])}
        
        CITATIONS
        ---------
        {"\\n".join(citations) if citations else "No sources cited"}
        
        
        CONCLUSION
        ----------
        This research provides a comprehensive overview of '{query}'. Further
        investigation may be needed for specific applications or contexts.
        
        Report generated by Deep Research Agent System on {datetime.now().isoformat()}
        """
        
        return report
    except Exception as e:
        return f"Error generating report: {str(e)}"

@function_tool
def generate_executive_summary(detailed_report: str) -> str:
    """
    Generate an executive summary from a detailed report.
    Returns a concise summary for quick reading.
    """
    try:
        # Extract key sections from the report
        lines = detailed_report.split('\n')
        summary = []
        
        for line in lines:
            if line.strip() and not line.startswith(' ') and ':' in line:
                summary.append(line)
            if line.startswith('KEY FINDINGS') or line.startswith('CONCLUSION'):
                summary.append(line)
        
        return "\n".join(summary[:15])  # Limit to first 15 lines
    except Exception as e:
        return f"Error generating summary: {str(e)}"

report_writer = Agent(
    name="Report Writer",
    instructions=(
        "You create professional research reports from synthesized findings.\n"
        "Use the generate_research_report tool to format the final report.\n"
        "Include an executive summary, key findings, and conclusions.\n"
        "Add proper citations for all sources used in the research.\n"
        "Use generate_executive_summary for a concise version.\n"
        "Format the report professionally for the end user."
    ),
    tools=[generate_research_report, generate_executive_summary],
    handoffs=[]
)